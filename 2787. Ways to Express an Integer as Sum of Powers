class Solution {
    static final int MOD = 1000000007;
    Integer[][] dp;

    public int numberOfWays(int n, int x) {
        dp = new Integer[n + 1][n + 1];
        return helper(n, x, 1);
    }

    private int helper(int remaining, int power, int num) {
        int val = (int) Math.pow(num, power);
        
        if (val > remaining) return 0; // can't pick further
        if (val == remaining) return 1; // exactly matches â†’ valid way

        if (dp[remaining][num] != null) return dp[remaining][num];

        
        int pick = helper(remaining - val, power, num + 1) % MOD;
        
        int skip = helper(remaining, power, num + 1) % MOD;

        return dp[remaining][num] = (pick + skip) % MOD;
    }
}
